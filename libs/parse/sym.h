#pragma once

#include <base/attributes.h>
#include <base/types.h>

// https://en.wikipedia.org/wiki/Nm_(Unix)
// Parse the symbol table generated by 'nm'
// The symbol map is a text file where each line maps one symbol

// Each line has three fields separated by spaces: 'addr T name...'
// All fields are ascii encoded. addr and name are of arbitrary length.
// T represents the type and its a single char

typedef struct {
    u64 addr;
    u8 type;
    char* name;
} symbol_entry;

enum symbol_type {
    ST_GLOBAL_ABS = 'A',
    ST_LOCAL_ABS = 'a',
    ST_GLOBAL_BSS = 'B',
    ST_LOCAL_BSS = 'b',
    ST_GLOBAL_DATA = 'D',
    ST_LOCAL_DATA = 'd',
    ST_SRC_FILE = 'f',
    ST_GLOBAL_TLS = 'L',
    ST_LOCAL_TLS = 'l',
    ST_GLOBAL_RO = 'R',
    ST_LOCAL_RO = 'r',
    ST_GLOBAL_TEXT = 'T',
    ST_LOCAL_TEXT = 't',
    ST_UNDEFINED = 'U',
};

typedef struct {
    usize len;
    symbol_entry* map;
} symbol_table;


usize sym_count(const char* sym_file, usize sym_file_len);

bool sym_parse(char* sym_file, symbol_table* table);
